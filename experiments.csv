name,f1_score,precision,recall,time,config
baseline,0.654995,0.817395,0.546430, Fri Sep 6 08:04:42 2019, Pipeline(memory=None, steps=[('vectorize', CountVectorizer(analyzer='word', binary=False, decode_error='strict', dtype=<class 'numpy.int64'>, encoding='utf-8', input='content', lowercase=True, max_df=1.0, max_features=None, min_df=1, ngram_range=(1, 1), preprocessor=None, stop_words=None, strip_accents=None, token_pattern='(?u)\\b\\w\\w+\\b', tokenizer=<function token... TfidfTransformer(norm='l2', smooth_idf=True, sublinear_tf=False, use_idf=True)), ('cls', MultiOutputClassifier(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True, intercept_scaling=1, l1_ratio=None, max_iter=100, multi_class='warn', n_jobs=None, penalty='l2', random_state=None, solver='warn', tol=0.0001, verbose=0, warm_start=False), n_jobs=4))], verbose=False)
feat_length,0.638704,0.815339,0.524973, Fri Sep  6 12:07:34 2019
feat_length_s,0.532918,0.774421,0.406233, Fri Sep  6 14:01:46 2019
baseline_s,0.543388,0.780415,0.416799, Fri Sep  6 14:10:04 2019
feat_verb_s,0.527197,0.775385,0.399366, Fri Sep  6 14:43:36 2019
feat_genre_s,0.550017,0.767992,0.428420, Fri Sep  6 16:31:44 2019
baseline_v2_s,0.604456,0.777409,0.494453, Sat Sep  7 11:13:20 2019
feat_glove_s,0.339567,0.555156,0.244585, Sat Sep  7 14:36:20 2019
feat_glove,0.364846,0.746953,0.241371, Sun Sep  8 13:26:44 2019
feat_glove,0.364840,0.747294,0.241331, Sun Sep  8 13:33:09 2019
feat_glove_25d_sent,0.364795,0.745380,0.241492, Sun Sep  8 13:38:44 2019
feat_glove_25d_sent-matrix,0.498880,0.693872,0.389440, Sun Sep  8 13:52:13 2019
feat_glove_25d_sent-matrix,0.487443,0.599636,0.410616, Sun Sep  8 13:59:02 2019
feat_glove_25d_centroid,0.494378,0.717079,0.377225, Sun Sep  8 14:27:59 2019
feat_glove_25d_centroid,0.511785,0.702046,0.402660, Sun Sep  8 14:44:26 2019
feat_glove_100d_sent,0.365239,0.749875,0.241411, Sun Sep  8 14:55:42 2019
feat_glove_100d_sent,0.367123,0.764399,0.241572, Sun Sep  8 15:28:44 2019
feat_glove_100d_sent-matrix,0.528374,0.598596,0.472897, Sun Sep  8 16:53:29 2019
feat_glove_tfidf_compose,0.364580,0.743964,0.241451, Sun Sep  8 17:45:28 2019
feat_combined,0.364552,0.744884,0.241331, Mon Sep  9 07:42:27 2019
decision_tree,0.607192,0.616990,0.597702, Mon Sep  9 08:16:46 2019
random_forest,0.593488,0.808778,0.468719, Mon Sep  9 08:32:24 2019
decision_tree,0.613643,0.630102,0.598023, Mon Sep  9 08:59:22 2019
random_forest,0.596491,0.808134,0.472697, Mon Sep  9 09:16:42 2019
baseline,0.637465,0.815869,0.523084,Wed Sep 11 08:39:11 2019,{'vectorize__preprocessor': None 'vectorize__token_pattern': '(?u)\\b\\w\\w+\\b' 'steps': [('vectorize' CountVectorizer(analyzer='word' binary=False decode_error='strict' dtype=<class 'numpy.int64'> encoding='utf-8' input='content' lowercase=True max_df=1.0 max_features=None min_df=1 ngram_range=(1 1) preprocessor=None stop_words=None strip_accents=None token_pattern='(?u)\\b\\w\\w+\\b' tokenizer=<function tokenize at 0x000002C300218EA0> vocabulary=None)) ('tfidf' TfidfTransformer(norm='l2' smooth_idf=True sublinear_tf=False use_idf=True)) ('cls' MultiOutputClassifier(estimator=LogisticRegression(C=1.0 class_weight=None dual=False fit_intercept=True intercept_scaling=1 l1_ratio=None max_iter=100 multi_class='warn' n_jobs=None penalty='l2' random_state=None solver='warn' tol=0.0001 verbose=0 warm_start=False) n_jobs=-1))] 'cls__estimator__C': 1.0 'vectorize__max_df': 1.0 'cls__estimator__penalty': 'l2' 'cls__estimator__n_jobs': None 'vectorize__dtype': <class 'numpy.int64'> 'vectorize__decode_error': 'strict' 'tfidf__norm': 'l2' 'memory': None 'cls__estimator__verbose': 0 'cls__estimator__dual': False 'cls__estimator__warm_start': False 'vectorize__binary': False 'vectorize__tokenizer': <function tokenize at 0x000002C300218EA0> 'cls__estimator__tol': 0.0001 'vectorize__vocabulary': None 'vectorize__input': 'content' 'cls__n_jobs': -1 'vectorize__min_df': 1 'cls__estimator': LogisticRegression(C=1.0 class_weight=None dual=False fit_intercept=True intercept_scaling=1 l1_ratio=None max_iter=100 multi_class='warn' n_jobs=None penalty='l2' random_state=None solver='warn' tol=0.0001 verbose=0 warm_start=False) 'cls__estimator__multi_class': 'warn' 'vectorize__max_features': None 'cls__estimator__l1_ratio': None 'vectorize__ngram_range': (1 1) 'vectorize__strip_accents': None 'verbose': False 'cls': MultiOutputClassifier(estimator=LogisticRegression(C=1.0 class_weight=None dual=False fit_intercept=True intercept_scaling=1 l1_ratio=None max_iter=100 multi_class='warn' n_jobs=None penalty='l2' random_state=None solver='warn' tol=0.0001 verbose=0 warm_start=False) n_jobs=-1) 'vectorize__stop_words': None 'cls__estimator__solver': 'warn' 'tfidf__sublinear_tf': False 'cls__estimator__intercept_scaling': 1 'vectorize__lowercase': True 'tfidf': TfidfTransformer(norm='l2' smooth_idf=True sublinear_tf=False use_idf=True) 'cls__estimator__fit_intercept': True 'cls__estimator__class_weight': None 'vectorize': CountVectorizer(analyzer='word' binary=False decode_error='strict' dtype=<class 'numpy.int64'> encoding='utf-8' input='content' lowercase=True max_df=1.0 max_features=None min_df=1 ngram_range=(1 1) preprocessor=None stop_words=None strip_accents=None token_pattern='(?u)\\b\\w\\w+\\b' tokenizer=<function tokenize at 0x000002C300218EA0> vocabulary=None) 'vectorize__encoding': 'utf-8' 'vectorize__analyzer': 'word' 'cls__estimator__random_state': None 'cls__estimator__max_iter': 100 'tfidf__use_idf': True 'tfidf__smooth_idf': True}
feat_length_s,0.498741,0.776036,0.367444,Wed Sep 11 08:44:54 2019,{'cls__estimator__n_jobs': None/ 'features__text__vectorize__tokenizer': <function tokenize_ner at 0x000002C30018D730>/ 'features__text__tfidf__use_idf': True/ 'features__length__memory': None/ 'features__text__verbose': False/ 'features__length__verbose': False/ 'features__length__count__kw_args': None/ 'steps': [('features'/ FeatureUnion(n_jobs=None/ transformer_list=[('text'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=1.0/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_p... sublinear_tf=False/ use_idf=True))]/ verbose=False))/ ('length'/ Pipeline(memory=None/ steps=[('count'/ FunctionTransformer(accept_sparse=False/ check_inverse=True/ func=<function get_text_length at 0x000002C300FF1F28>/ inv_kw_args=None/ inverse_func=None/ kw_args=None/ pass_y='deprecated'/ validate=False))]/ verbose=False))]/ transformer_weights=None/ verbose=False))/ ('cls'/ MultiOutputClassifier(estimator=LogisticRegression(C=1.0/ class_weight=None/ dual=False/ fit_intercept=True/ intercept_scaling=1/ l1_ratio=None/ max_iter=100/ multi_class='warn'/ n_jobs=None/ penalty='l2'/ random_state=None/ solver='warn'/ tol=0.0001/ verbose=0/ warm_start=False)/ n_jobs=-1))]/ 'features__text': Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=1.0/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=True))]/ verbose=False)/ 'features__text__vectorize__strip_accents': None/ 'cls__estimator__C': 1.0/ 'features__text__tfidf__sublinear_tf': False/ 'features__length__steps': [('count'/ FunctionTransformer(accept_sparse=False/ check_inverse=True/ func=<function get_text_length at 0x000002C300FF1F28>/ inv_kw_args=None/ inverse_func=None/ kw_args=None/ pass_y='deprecated'/ validate=False))]/ 'cls__estimator__tol': 0.0001/ 'features__text__memory': None/ 'features__text__vectorize__binary': False/ 'memory': None/ 'features__verbose': False/ 'cls__estimator__dual': False/ 'features__length__count__inverse_func': None/ 'cls__estimator__verbose': 0/ 'features__text__vectorize__input': 'content'/ 'features__length__count__pass_y': 'deprecated'/ 'features__text__vectorize__encoding': 'utf-8'/ 'cls__n_jobs': -1/ 'cls__estimator__l1_ratio': None/ 'features__text__vectorize__token_pattern': '(?u)\\b\\w\\w+\\b'/ 'cls__estimator': LogisticRegression(C=1.0/ class_weight=None/ dual=False/ fit_intercept=True/ intercept_scaling=1/ l1_ratio=None/ max_iter=100/ multi_class='warn'/ n_jobs=None/ penalty='l2'/ random_state=None/ solver='warn'/ tol=0.0001/ verbose=0/ warm_start=False)/ 'cls__estimator__multi_class': 'warn'/ 'features__length__count__accept_sparse': False/ 'features__text__vectorize__preprocessor': None/ 'features__text__tfidf__norm': 'l2'/ 'features__text__vectorize__dtype': <class 'numpy.int64'>/ 'features__length__count__inv_kw_args': None/ 'features__text__vectorize__max_features': None/ 'features__text__vectorize__vocabulary': None/ 'features__text__vectorize__min_df': 1/ 'verbose': False/ 'cls': MultiOutputClassifier(estimator=LogisticRegression(C=1.0/ class_weight=None/ dual=False/ fit_intercept=True/ intercept_scaling=1/ l1_ratio=None/ max_iter=100/ multi_class='warn'/ n_jobs=None/ penalty='l2'/ random_state=None/ solver='warn'/ tol=0.0001/ verbose=0/ warm_start=False)/ n_jobs=-1)/ 'features__transformer_list': [('text'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=1.0/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=True))]/ verbose=False))/ ('length'/ Pipeline(memory=None/ steps=[('count'/ FunctionTransformer(accept_sparse=False/ check_inverse=True/ func=<function get_text_length at 0x000002C300FF1F28>/ inv_kw_args=None/ inverse_func=None/ kw_args=None/ pass_y='deprecated'/ validate=False))]/ verbose=False))]/ 'features__text__vectorize__max_df': 1.0/ 'features__length__count': FunctionTransformer(accept_sparse=False/ check_inverse=True/ func=<function get_text_length at 0x000002C300FF1F28>/ inv_kw_args=None/ inverse_func=None/ kw_args=None/ pass_y='deprecated'/ validate=False)/ 'features__text__tfidf__smooth_idf': True/ 'cls__estimator__max_iter': 100/ 'features__length__count__check_inverse': True/ 'cls__estimator__warm_start': False/ 'features__text__vectorize': CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=1.0/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None)/ 'features__length__count__validate': False/ 'features__text__vectorize__stop_words': None/ 'features__text__vectorize__analyzer': 'word'/ 'features__n_jobs': None/ 'features__text__vectorize__ngram_range': (1/ 1)/ 'cls__estimator__solver': 'warn'/ 'cls__estimator__class_weight': None/ 'features__text__vectorize__decode_error': 'strict'/ 'features__length__count__func': <function get_text_length at 0x000002C300FF1F28>/ 'cls__estimator__fit_intercept': True/ 'cls__estimator__penalty': 'l2'/ 'features__text__vectorize__lowercase': True/ 'features__length': Pipeline(memory=None/ steps=[('count'/ FunctionTransformer(accept_sparse=False/ check_inverse=True/ func=<function get_text_length at 0x000002C300FF1F28>/ inv_kw_args=None/ inverse_func=None/ kw_args=None/ pass_y='deprecated'/ validate=False))]/ verbose=False)/ 'features__text__tfidf': TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=True)/ 'features__transformer_weights': None/ 'features__text__steps': [('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=1.0/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=True))]/ 'cls__estimator__random_state': None/ 'features': FeatureUnion(n_jobs=None/ transformer_list=[('text'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=1.0/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_p... sublinear_tf=False/ use_idf=True))]/ verbose=False))/ ('length'/ Pipeline(memory=None/ steps=[('count'/ FunctionTransformer(accept_sparse=False/ check_inverse=True/ func=<function get_text_length at 0x000002C300FF1F28>/ inv_kw_args=None/ inverse_func=None/ kw_args=None/ pass_y='deprecated'/ validate=False))]/ verbose=False))]/ transformer_weights=None/ verbose=False)/ 'cls__estimator__intercept_scaling': 1}
feat_verb_s,0.505376,0.779867,0.373807,Wed Sep 11 08:45:46 2019,{'cls__estimator__n_jobs': None/ 'features__text__vectorize__tokenizer': <function tokenize_ner at 0x000002C30018D730>/ 'features__text__tfidf__use_idf': True/ 'features__starting_verb': StartingVerbExtractor()/ 'features__text__vectorize__input': 'content'/ 'features__text__tfidf__smooth_idf': True/ 'steps': [('features'/ FeatureUnion(n_jobs=None/ transformer_list=[('text'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=1.0/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=True))]/ verbose=False))/ ('starting_verb'/ StartingVerbExtractor())]/ transformer_weights=None/ verbose=False))/ ('cls'/ MultiOutputClassifier(estimator=LogisticRegression(C=1.0/ class_weight=None/ dual=False/ fit_intercept=True/ intercept_scaling=1/ l1_ratio=None/ max_iter=100/ multi_class='warn'/ n_jobs=None/ penalty='l2'/ random_state=None/ solver='warn'/ tol=0.0001/ verbose=0/ warm_start=False)/ n_jobs=-1))]/ 'features__text': Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=1.0/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=True))]/ verbose=False)/ 'features__text__vectorize__strip_accents': None/ 'cls__estimator__C': 1.0/ 'features__text__tfidf__sublinear_tf': False/ 'cls__estimator__penalty': 'l2'/ 'cls__estimator__tol': 0.0001/ 'features__text__memory': None/ 'features__text__vectorize__binary': False/ 'memory': None/ 'features__verbose': False/ 'cls__estimator__dual': False/ 'cls__estimator__verbose': 0/ 'features__text__verbose': False/ 'features__transformer_weights': None/ 'features__text__vectorize': CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=1.0/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None)/ 'cls__estimator__l1_ratio': None/ 'cls__n_jobs': -1/ 'cls__estimator': LogisticRegression(C=1.0/ class_weight=None/ dual=False/ fit_intercept=True/ intercept_scaling=1/ l1_ratio=None/ max_iter=100/ multi_class='warn'/ n_jobs=None/ penalty='l2'/ random_state=None/ solver='warn'/ tol=0.0001/ verbose=0/ warm_start=False)/ 'cls__estimator__multi_class': 'warn'/ 'features__text__vectorize__preprocessor': None/ 'features__text__tfidf__norm': 'l2'/ 'features__text__vectorize__dtype': <class 'numpy.int64'>/ 'features__text__vectorize__max_features': None/ 'features__text__vectorize__vocabulary': None/ 'features__text__vectorize__min_df': 1/ 'verbose': False/ 'cls': MultiOutputClassifier(estimator=LogisticRegression(C=1.0/ class_weight=None/ dual=False/ fit_intercept=True/ intercept_scaling=1/ l1_ratio=None/ max_iter=100/ multi_class='warn'/ n_jobs=None/ penalty='l2'/ random_state=None/ solver='warn'/ tol=0.0001/ verbose=0/ warm_start=False)/ n_jobs=-1)/ 'features__transformer_list': [('text'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=1.0/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=True))]/ verbose=False))/ ('starting_verb'/ StartingVerbExtractor())]/ 'features__text__vectorize__max_df': 1.0/ 'cls__estimator__solver': 'warn'/ 'cls__estimator__warm_start': False/ 'features__text__vectorize__encoding': 'utf-8'/ 'features__text__vectorize__token_pattern': '(?u)\\b\\w\\w+\\b'/ 'features__text__vectorize__stop_words': None/ 'features__text__vectorize__analyzer': 'word'/ 'features__n_jobs': None/ 'features__text__vectorize__ngram_range': (1/ 1)/ 'cls__estimator__fit_intercept': True/ 'features__text__vectorize__decode_error': 'strict'/ 'cls__estimator__class_weight': None/ 'features__text__vectorize__lowercase': True/ 'cls__estimator__max_iter': 100/ 'features__text__tfidf': TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=True)/ 'features__text__steps': [('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=1.0/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=True))]/ 'cls__estimator__random_state': None/ 'features': FeatureUnion(n_jobs=None/ transformer_list=[('text'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=1.0/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=True))]/ verbose=False))/ ('starting_verb'/ StartingVerbExtractor())]/ transformer_weights=None/ verbose=False)/ 'cls__estimator__intercept_scaling': 1}
feat_combined,0.656647,0.808151,0.552979,Wed Sep 11 09:03:21 2019,{'features__text__embs__glove__glove_emb__dim': None/ 'features__text__embs__term_emb__tfidf__norm': 'l2'/ 'steps': [('features'/ FeatureUnion(n_jobs=None/ transformer_list=[('text'/ Pipeline(memory=None/ steps=[('msg'/ ColumnSelector(name='message'))/ ('embs'/ FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ l... verbose=False))]/ transformer_weights=None/ verbose=False))]/ verbose=False))/ ('genre'/ Pipeline(memory=None/ steps=[('gnr'/ ColumnSelector(name=['genre']))/ ('category'/ OneHotEncoder(categorical_features=None/ categories=None/ drop=None/ dtype=<class 'numpy.float64'>/ handle_unknown='error'/ n_values=None/ sparse=True))]/ verbose=False))]/ transformer_weights=None/ verbose=False))/ ('cls'/ MultiOutputClassifier(estimator=LogisticRegression(C=1.0/ class_weight=None/ dual=False/ fit_intercept=True/ intercept_scaling=1/ l1_ratio=None/ max_iter=100/ multi_class='warn'/ n_jobs=None/ penalty='l2'/ random_state=None/ solver='warn'/ tol=0.0001/ verbose=0/ warm_start=False)/ n_jobs=-1))]/ 'features__text': Pipeline(memory=None/ steps=[('msg'/ ColumnSelector(name='message'))/ ('embs'/ FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1... vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False))]/ verbose=False)/ 'features__text__embs__term_emb__vectorize__token_pattern': '(?u)\\b\\w\\w+\\b'/ 'cls__estimator__C': 1.0/ 'features__genre__category__sparse': True/ 'cls__estimator__penalty': 'l2'/ 'cls__estimator__n_jobs': None/ 'features__text__embs__verbose': False/ 'cls__estimator__warm_start': False/ 'features__text__embs__term_emb__vectorize__input': 'content'/ 'memory': None/ 'features__verbose': False/ 'cls__estimator__dual': False/ 'features__genre__category__n_values': None/ 'features__text__embs__term_emb__vectorize__strip_accents': None/ 'features__text__verbose': False/ 'features__text__embs__term_emb__vectorize__stop_words': None/ 'features__text__msg': ColumnSelector(name='message')/ 'features__text__embs__glove__glove_emb__max_feat': 5/ 'features__genre__memory': None/ 'features__text__embs__term_emb__vectorize__min_df': 1/ 'features__text__embs__term_emb__vectorize__lowercase': True/ 'features__text__embs__term_emb__verbose': False/ 'features__text__embs__n_jobs': None/ 'features__text__embs__term_emb__vectorize__encoding': 'utf-8'/ 'cls__estimator__l1_ratio': None/ 'features__text__msg__name': 'message'/ 'features__text__embs__term_emb__tfidf__sublinear_tf': False/ 'features__text__embs__term_emb__vectorize__vocabulary': None/ 'features__text__embs__transformer_weights': None/ 'features__genre__category__categories': None/ 'cls__estimator__intercept_scaling': 1/ 'features__genre__category__dtype': <class 'numpy.float64'>/ 'features__n_jobs': None/ 'features__genre__category': OneHotEncoder(categorical_features=None/ categories=None/ drop=None/ dtype=<class 'numpy.float64'>/ handle_unknown='error'/ n_values=None/ sparse=True)/ 'features__genre__steps': [('gnr'/ ColumnSelector(name=['genre']))/ ('category'/ OneHotEncoder(categorical_features=None/ categories=None/ drop=None/ dtype=<class 'numpy.float64'>/ handle_unknown='error'/ n_values=None/ sparse=True))]/ 'features__genre__category__handle_unknown': 'error'/ 'features__text__embs__term_emb': Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False)/ 'cls__estimator__tol': 0.0001/ 'features__text__embs__term_emb__vectorize__max_df': 0.5/ 'features__text__steps': [('msg'/ ColumnSelector(name='message'))/ ('embs'/ FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ tok... tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False))]/ 'cls__estimator__random_state': None/ 'features__text__embs__term_emb__vectorize__max_features': None/ 'features__text__embs__glove__glove_emb': GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid')/ 'features__text__embs__glove__glove_emb__name': None/ 'features__text__embs': FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ tok... tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False)/ 'cls__estimator__class_weight': None/ 'features__text__embs__term_emb__vectorize__binary': False/ 'features__text__memory': None/ 'features__text__embs__term_emb__memory': None/ 'cls__estimator__verbose': 0/ 'features__text__embs__glove__glove_emb__type': 'centroid'/ 'features__transformer_weights': None/ 'cls__n_jobs': -1/ 'cls__estimator': LogisticRegression(C=1.0/ class_weight=None/ dual=False/ fit_intercept=True/ intercept_scaling=1/ l1_ratio=None/ max_iter=100/ multi_class='warn'/ n_jobs=None/ penalty='l2'/ random_state=None/ solver='warn'/ tol=0.0001/ verbose=0/ warm_start=False)/ 'cls__estimator__multi_class': 'warn'/ 'features__text__embs__term_emb__vectorize__decode_error': 'strict'/ 'features__text__embs__term_emb__vectorize__preprocessor': None/ 'features__genre__gnr': ColumnSelector(name=['genre'])/ 'features__genre__category__categorical_features': None/ 'features__text__embs__term_emb__vectorize__tokenizer': <function tokenize_ner at 0x000002C30018D730>/ 'features__text__embs__transformer_list': [('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ 'features__text__embs__term_emb__tfidf': TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False)/ 'features__text__embs__glove': Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False)/ 'verbose': False/ 'cls': MultiOutputClassifier(estimator=LogisticRegression(C=1.0/ class_weight=None/ dual=False/ fit_intercept=True/ intercept_scaling=1/ l1_ratio=None/ max_iter=100/ multi_class='warn'/ n_jobs=None/ penalty='l2'/ random_state=None/ solver='warn'/ tol=0.0001/ verbose=0/ warm_start=False)/ n_jobs=-1)/ 'features__text__embs__term_emb__vectorize': CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None)/ 'features__transformer_list': [('text'/ Pipeline(memory=None/ steps=[('msg'/ ColumnSelector(name='message'))/ ('embs'/ FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1... vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False))]/ verbose=False))/ ('genre'/ Pipeline(memory=None/ steps=[('gnr'/ ColumnSelector(name=['genre']))/ ('category'/ OneHotEncoder(categorical_features=None/ categories=None/ drop=None/ dtype=<class 'numpy.float64'>/ handle_unknown='error'/ n_values=None/ sparse=True))]/ verbose=False))]/ 'features__genre__category__drop': None/ 'cls__estimator__solver': 'warn'/ 'features__genre__verbose': False/ 'features__genre': Pipeline(memory=None/ steps=[('gnr'/ ColumnSelector(name=['genre']))/ ('category'/ OneHotEncoder(categorical_features=None/ categories=None/ drop=None/ dtype=<class 'numpy.float64'>/ handle_unknown='error'/ n_values=None/ sparse=True))]/ verbose=False)/ 'features__text__embs__term_emb__tfidf__use_idf': False/ 'features__text__embs__glove__glove_emb__tokenizer': <function tokenize_clean at 0x000002C35E90AE18>/ 'features__text__embs__term_emb__steps': [('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ 'features__text__embs__term_emb__vectorize__dtype': <class 'numpy.int64'>/ 'features__text__embs__term_emb__vectorize__analyzer': 'word'/ 'features__text__embs__glove__verbose': False/ 'features__text__embs__term_emb__tfidf__smooth_idf': True/ 'cls__estimator__fit_intercept': True/ 'features__text__embs__glove__memory': None/ 'cls__estimator__max_iter': 100/ 'features__text__embs__glove__steps': [('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ 'features__genre__gnr__name': ['genre']/ 'features': FeatureUnion(n_jobs=None/ transformer_list=[('text'/ Pipeline(memory=None/ steps=[('msg'/ ColumnSelector(name='message'))/ ('embs'/ FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ l... verbose=False))]/ transformer_weights=None/ verbose=False))]/ verbose=False))/ ('genre'/ Pipeline(memory=None/ steps=[('gnr'/ ColumnSelector(name=['genre']))/ ('category'/ OneHotEncoder(categorical_features=None/ categories=None/ drop=None/ dtype=<class 'numpy.float64'>/ handle_unknown='error'/ n_values=None/ sparse=True))]/ verbose=False))]/ transformer_weights=None/ verbose=False)/ 'features__text__embs__term_emb__vectorize__ngram_range': (1/ 1)}
feat_combined,0.652940,0.780347,0.561297,Wed Sep 11 09:59:26 2019,{'cls__estimator__n_jobs': None/ 'features__term_emb__vectorize__ngram_range': (1/ 1)/ 'steps': [('features'/ FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ tok... tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False))/ ('cls'/ MultiOutputClassifier(estimator=LogisticRegression(C=1.0/ class_weight=None/ dual=False/ fit_intercept=True/ intercept_scaling=1/ l1_ratio=None/ max_iter=100/ multi_class='warn'/ n_jobs=None/ penalty='l2'/ random_state=None/ solver='warn'/ tol=0.0001/ verbose=0/ warm_start=False)/ n_jobs=-1))]/ 'features__term_emb__vectorize': CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None)/ 'features__term_emb__vectorize__dtype': <class 'numpy.int64'>/ 'cls__estimator__C': 1.0/ 'features__glove__glove_emb__type': 'centroid'/ 'features__term_emb__vectorize__tokenizer': <function tokenize_ner at 0x000002C30018D730>/ 'features__term_emb__memory': None/ 'features__term_emb__vectorize__max_df': 0.5/ 'features__glove__glove_emb__tokenizer': <function tokenize_clean at 0x000002C35E90AE18>/ 'cls__estimator__warm_start': False/ 'memory': None/ 'features__verbose': False/ 'features__term_emb__tfidf__smooth_idf': True/ 'features__glove__glove_emb__name': None/ 'features__term_emb__vectorize__min_df': 1/ 'cls__estimator__verbose': 0/ 'cls__estimator__dual': False/ 'features__glove__verbose': False/ 'features__term_emb__steps': [('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ 'features__transformer_weights': None/ 'features__term_emb__vectorize__input': 'content'/ 'features__term_emb__tfidf__use_idf': False/ 'cls__n_jobs': -1/ 'features__glove__steps': [('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ 'features__term_emb__vectorize__token_pattern': '(?u)\\b\\w\\w+\\b'/ 'features__term_emb__verbose': False/ 'features__term_emb__tfidf__norm': 'l2'/ 'features__glove__glove_emb': GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid')/ 'features__glove__glove_emb__max_feat': 5/ 'features__term_emb': Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False)/ 'features__term_emb__vectorize__decode_error': 'strict'/ 'cls__estimator__l1_ratio': None/ 'features__glove': Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False)/ 'features__glove__memory': None/ 'features__term_emb__tfidf': TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False)/ 'features__term_emb__vectorize__max_features': None/ 'verbose': False/ 'cls': MultiOutputClassifier(estimator=LogisticRegression(C=1.0/ class_weight=None/ dual=False/ fit_intercept=True/ intercept_scaling=1/ l1_ratio=None/ max_iter=100/ multi_class='warn'/ n_jobs=None/ penalty='l2'/ random_state=None/ solver='warn'/ tol=0.0001/ verbose=0/ warm_start=False)/ n_jobs=-1)/ 'features__transformer_list': [('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ 'cls__estimator__solver': 'warn'/ 'features__term_emb__vectorize__analyzer': 'word'/ 'features__term_emb__vectorize__vocabulary': None/ 'features__term_emb__vectorize__lowercase': True/ 'cls__estimator__multi_class': 'warn'/ 'features__term_emb__vectorize__preprocessor': None/ 'features__n_jobs': None/ 'features__term_emb__vectorize__stop_words': None/ 'cls__estimator__class_weight': None/ 'cls__estimator__fit_intercept': True/ 'features__term_emb__vectorize__binary': False/ 'features__glove__glove_emb__dim': None/ 'cls__estimator__penalty': 'l2'/ 'cls__estimator__max_iter': 100/ 'cls__estimator__random_state': None/ 'cls__estimator__tol': 0.0001/ 'features__term_emb__vectorize__encoding': 'utf-8'/ 'features__term_emb__vectorize__strip_accents': None/ 'cls__estimator': LogisticRegression(C=1.0/ class_weight=None/ dual=False/ fit_intercept=True/ intercept_scaling=1/ l1_ratio=None/ max_iter=100/ multi_class='warn'/ n_jobs=None/ penalty='l2'/ random_state=None/ solver='warn'/ tol=0.0001/ verbose=0/ warm_start=False)/ 'features__term_emb__tfidf__sublinear_tf': False/ 'features': FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ tok... tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False)/ 'cls__estimator__intercept_scaling': 1}
feat_combined,0.585334,0.592379,0.578455,Wed Sep 11 10:38:47 2019,{'cls__estimator__min_weight_fraction_leaf': 0.0/ 'features__term_emb__vectorize__ngram_range': (1/ 1)/ 'steps': [('features'/ FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ tok... tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False))/ ('cls'/ MultiOutputClassifier(estimator=DecisionTreeClassifier(class_weight=None/ criterion='gini'/ max_depth=None/ max_features=None/ max_leaf_nodes=None/ min_impurity_decrease=0.0/ min_impurity_split=None/ min_samples_leaf=1/ min_samples_split=2/ min_weight_fraction_leaf=0.0/ presort=False/ random_state=None/ splitter='best')/ n_jobs=-1))]/ 'features__term_emb__vectorize': CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ vocabulary=None)/ 'features__term_emb__vectorize__dtype': <class 'numpy.int64'>/ 'cls__estimator__presort': False/ 'features__glove__glove_emb__type': 'centroid'/ 'features__term_emb__vectorize__tokenizer': <function tokenize_clean at 0x000002C372AF2268>/ 'features__term_emb__memory': None/ 'features__term_emb__vectorize__max_df': 0.5/ 'features__glove__glove_emb__tokenizer': <function tokenize_clean at 0x000002C372AF2268>/ 'cls__estimator__min_impurity_decrease': 0.0/ 'memory': None/ 'features__verbose': False/ 'features__term_emb__tfidf__smooth_idf': True/ 'features__glove__glove_emb__name': None/ 'features__term_emb__vectorize__min_df': 1/ 'cls__estimator__splitter': 'best'/ 'features__glove__verbose': False/ 'features__term_emb__steps': [('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ 'cls__estimator__criterion': 'gini'/ 'features__transformer_weights': None/ 'cls__estimator__random_state': None/ 'features__term_emb__vectorize__input': 'content'/ 'features__term_emb__tfidf__use_idf': False/ 'cls__n_jobs': -1/ 'features__glove__steps': [('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ type='centroid'))]/ 'features__term_emb__vectorize__token_pattern': '(?u)\\b\\w\\w+\\b'/ 'features__term_emb__verbose': False/ 'features__term_emb__tfidf__norm': 'l2'/ 'features__glove__glove_emb': GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ type='centroid')/ 'features__glove__glove_emb__max_feat': 5/ 'features__term_emb': Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False)/ 'features__term_emb__vectorize__decode_error': 'strict'/ 'cls__estimator__max_features': None/ 'features__glove': Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ type='centroid'))]/ verbose=False)/ 'features__glove__memory': None/ 'features__term_emb__tfidf': TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False)/ 'features__term_emb__vectorize__max_features': None/ 'verbose': False/ 'cls': MultiOutputClassifier(estimator=DecisionTreeClassifier(class_weight=None/ criterion='gini'/ max_depth=None/ max_features=None/ max_leaf_nodes=None/ min_impurity_decrease=0.0/ min_impurity_split=None/ min_samples_leaf=1/ min_samples_split=2/ min_weight_fraction_leaf=0.0/ presort=False/ random_state=None/ splitter='best')/ n_jobs=-1)/ 'features__transformer_list': [('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ type='centroid'))]/ verbose=False))]/ 'cls__estimator__min_samples_leaf': 1/ 'features__term_emb__vectorize__analyzer': 'word'/ 'cls__estimator__min_samples_split': 2/ 'features__term_emb__vectorize__vocabulary': None/ 'features__term_emb__vectorize__lowercase': True/ 'features__term_emb__vectorize__preprocessor': None/ 'features__n_jobs': None/ 'features__term_emb__vectorize__stop_words': None/ 'cls__estimator__max_leaf_nodes': None/ 'features__term_emb__vectorize__binary': False/ 'features__glove__glove_emb__dim': None/ 'cls__estimator__class_weight': None/ 'cls__estimator__min_impurity_split': None/ 'features__term_emb__vectorize__encoding': 'utf-8'/ 'features__term_emb__vectorize__strip_accents': None/ 'cls__estimator__max_depth': None/ 'cls__estimator': DecisionTreeClassifier(class_weight=None/ criterion='gini'/ max_depth=None/ max_features=None/ max_leaf_nodes=None/ min_impurity_decrease=0.0/ min_impurity_split=None/ min_samples_leaf=1/ min_samples_split=2/ min_weight_fraction_leaf=0.0/ presort=False/ random_state=None/ splitter='best')/ 'features__term_emb__tfidf__sublinear_tf': False/ 'features': FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ tok... tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False)}
adaboost_tree_classifier,0.519252,0.539429,0.500530,Wed Sep 11 10:53:05 2019,{'cls__estimator__base_estimator__max_depth': None/ 'features__term_emb__vectorize__ngram_range': (1/ 1)/ 'cls__estimator__base_estimator__criterion': 'gini'/ 'cls__estimator__n_estimators': 5/ 'steps': [('features'/ FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ tok... tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False))/ ('cls'/ MultiOutputClassifier(estimator=AdaBoostClassifier(algorithm='SAMME.R'/ base_estimator=DecisionTreeClassifier(class_weight=None/ criterion='gini'/ max_depth=None/ max_features=None/ max_leaf_nodes=None/ min_impurity_decrease=0.0/ min_impurity_split=None/ min_samples_leaf=1/ min_samples_split=2/ min_weight_fraction_leaf=0.0/ presort=False/ random_state=None/ splitter='best')/ learning_rate=1.0/ n_estimators=5/ random_state=None)/ n_jobs=-1))]/ 'features__term_emb__vectorize': CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None)/ 'features__term_emb__vectorize__dtype': <class 'numpy.int64'>/ 'features__glove__glove_emb__type': 'centroid'/ 'features__term_emb__vectorize__tokenizer': <function tokenize_ner at 0x000002C30018D730>/ 'features__term_emb__memory': None/ 'features__term_emb__vectorize__max_df': 0.5/ 'features__glove__glove_emb__tokenizer': <function tokenize_clean at 0x000002C35E90AE18>/ 'memory': None/ 'features__verbose': False/ 'features__term_emb__tfidf__smooth_idf': True/ 'features__glove__glove_emb__name': None/ 'features__term_emb__vectorize__min_df': 1/ 'cls__estimator__base_estimator__min_impurity_decrease': 0.0/ 'features__glove__verbose': False/ 'features__term_emb__steps': [('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ 'features__transformer_weights': None/ 'cls__estimator__base_estimator__min_samples_split': 2/ 'features__term_emb__vectorize__input': 'content'/ 'features__term_emb__tfidf__use_idf': False/ 'cls__n_jobs': -1/ 'features__glove__steps': [('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ 'features__term_emb__vectorize__token_pattern': '(?u)\\b\\w\\w+\\b'/ 'features__term_emb__verbose': False/ 'features__term_emb__tfidf__norm': 'l2'/ 'features__glove__glove_emb': GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid')/ 'features__glove__glove_emb__max_feat': 5/ 'features__term_emb': Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False)/ 'features__term_emb__vectorize__decode_error': 'strict'/ 'cls__estimator__base_estimator__splitter': 'best'/ 'features__glove': Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False)/ 'features__glove__memory': None/ 'features__term_emb__tfidf': TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False)/ 'features__term_emb__vectorize__max_features': None/ 'verbose': False/ 'cls': MultiOutputClassifier(estimator=AdaBoostClassifier(algorithm='SAMME.R'/ base_estimator=DecisionTreeClassifier(class_weight=None/ criterion='gini'/ max_depth=None/ max_features=None/ max_leaf_nodes=None/ min_impurity_decrease=0.0/ min_impurity_split=None/ min_samples_leaf=1/ min_samples_split=2/ min_weight_fraction_leaf=0.0/ presort=False/ random_state=None/ splitter='best')/ learning_rate=1.0/ n_estimators=5/ random_state=None)/ n_jobs=-1)/ 'features__transformer_list': [('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ 'features__term_emb__vectorize__analyzer': 'word'/ 'cls__estimator__base_estimator__min_weight_fraction_leaf': 0.0/ 'features__term_emb__vectorize__vocabulary': None/ 'features__term_emb__vectorize__lowercase': True/ 'cls__estimator__base_estimator__random_state': None/ 'features__term_emb__vectorize__preprocessor': None/ 'features__n_jobs': None/ 'cls__estimator__base_estimator__min_samples_leaf': 1/ 'features__term_emb__vectorize__stop_words': None/ 'cls__estimator__base_estimator__min_impurity_split': None/ 'cls__estimator__base_estimator__class_weight': None/ 'cls__estimator__base_estimator': DecisionTreeClassifier(class_weight=None/ criterion='gini'/ max_depth=None/ max_features=None/ max_leaf_nodes=None/ min_impurity_decrease=0.0/ min_impurity_split=None/ min_samples_leaf=1/ min_samples_split=2/ min_weight_fraction_leaf=0.0/ presort=False/ random_state=None/ splitter='best')/ 'cls__estimator__base_estimator__presort': False/ 'features__term_emb__vectorize__binary': False/ 'features__glove__glove_emb__dim': None/ 'cls__estimator__algorithm': 'SAMME.R'/ 'cls__estimator__random_state': None/ 'cls__estimator__base_estimator__max_features': None/ 'features__term_emb__vectorize__encoding': 'utf-8'/ 'features__term_emb__vectorize__strip_accents': None/ 'cls__estimator': AdaBoostClassifier(algorithm='SAMME.R'/ base_estimator=DecisionTreeClassifier(class_weight=None/ criterion='gini'/ max_depth=None/ max_features=None/ max_leaf_nodes=None/ min_impurity_decrease=0.0/ min_impurity_split=None/ min_samples_leaf=1/ min_samples_split=2/ min_weight_fraction_leaf=0.0/ presort=False/ random_state=None/ splitter='best')/ learning_rate=1.0/ n_estimators=5/ random_state=None)/ 'cls__estimator__learning_rate': 1.0/ 'features__term_emb__tfidf__sublinear_tf': False/ 'features': FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ tok... tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False)/ 'cls__estimator__base_estimator__max_leaf_nodes': None}
decision_tree,0.521477,0.538722,0.505302,Wed Sep 11 10:58:40 2019,{'cls__estimator__min_weight_fraction_leaf': 0.0/ 'features__term_emb__vectorize__ngram_range': (1/ 1)/ 'steps': [('features'/ FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ tok... tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False))/ ('cls'/ MultiOutputClassifier(estimator=DecisionTreeClassifier(class_weight=None/ criterion='gini'/ max_depth=None/ max_features=None/ max_leaf_nodes=None/ min_impurity_decrease=0.0/ min_impurity_split=None/ min_samples_leaf=1/ min_samples_split=2/ min_weight_fraction_leaf=0.0/ presort=False/ random_state=None/ splitter='best')/ n_jobs=-1))]/ 'features__term_emb__vectorize': CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None)/ 'features__term_emb__vectorize__dtype': <class 'numpy.int64'>/ 'cls__estimator__presort': False/ 'features__glove__glove_emb__type': 'centroid'/ 'features__term_emb__vectorize__tokenizer': <function tokenize_ner at 0x000002C30018D730>/ 'features__term_emb__memory': None/ 'features__term_emb__vectorize__max_df': 0.5/ 'features__glove__glove_emb__tokenizer': <function tokenize_clean at 0x000002C35E90AE18>/ 'cls__estimator__min_impurity_decrease': 0.0/ 'memory': None/ 'features__verbose': False/ 'features__term_emb__tfidf__smooth_idf': True/ 'features__glove__glove_emb__name': None/ 'features__term_emb__vectorize__min_df': 1/ 'cls__estimator__splitter': 'best'/ 'features__glove__verbose': False/ 'features__term_emb__steps': [('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ 'cls__estimator__criterion': 'gini'/ 'features__transformer_weights': None/ 'cls__estimator__random_state': None/ 'features__term_emb__vectorize__input': 'content'/ 'features__term_emb__tfidf__use_idf': False/ 'cls__n_jobs': -1/ 'features__glove__steps': [('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ 'features__term_emb__vectorize__token_pattern': '(?u)\\b\\w\\w+\\b'/ 'features__term_emb__verbose': False/ 'features__term_emb__tfidf__norm': 'l2'/ 'features__glove__glove_emb': GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid')/ 'features__glove__glove_emb__max_feat': 5/ 'features__term_emb': Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False)/ 'features__term_emb__vectorize__decode_error': 'strict'/ 'cls__estimator__max_features': None/ 'features__glove': Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False)/ 'features__glove__memory': None/ 'features__term_emb__tfidf': TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False)/ 'features__term_emb__vectorize__max_features': None/ 'verbose': False/ 'cls': MultiOutputClassifier(estimator=DecisionTreeClassifier(class_weight=None/ criterion='gini'/ max_depth=None/ max_features=None/ max_leaf_nodes=None/ min_impurity_decrease=0.0/ min_impurity_split=None/ min_samples_leaf=1/ min_samples_split=2/ min_weight_fraction_leaf=0.0/ presort=False/ random_state=None/ splitter='best')/ n_jobs=-1)/ 'features__transformer_list': [('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ 'cls__estimator__min_samples_leaf': 1/ 'features__term_emb__vectorize__analyzer': 'word'/ 'cls__estimator__min_samples_split': 2/ 'features__term_emb__vectorize__vocabulary': None/ 'features__term_emb__vectorize__lowercase': True/ 'features__term_emb__vectorize__preprocessor': None/ 'features__n_jobs': None/ 'features__term_emb__vectorize__stop_words': None/ 'cls__estimator__max_leaf_nodes': None/ 'features__term_emb__vectorize__binary': False/ 'features__glove__glove_emb__dim': None/ 'cls__estimator__class_weight': None/ 'cls__estimator__min_impurity_split': None/ 'features__term_emb__vectorize__encoding': 'utf-8'/ 'features__term_emb__vectorize__strip_accents': None/ 'cls__estimator__max_depth': None/ 'cls__estimator': DecisionTreeClassifier(class_weight=None/ criterion='gini'/ max_depth=None/ max_features=None/ max_leaf_nodes=None/ min_impurity_decrease=0.0/ min_impurity_split=None/ min_samples_leaf=1/ min_samples_split=2/ min_weight_fraction_leaf=0.0/ presort=False/ random_state=None/ splitter='best')/ 'features__term_emb__tfidf__sublinear_tf': False/ 'features': FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ tok... tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False)}
random_forest,0.437337,0.732254,0.311771,Wed Sep 11 11:01:30 2019,{'cls__estimator__min_weight_fraction_leaf': 0.0/ 'features__term_emb__vectorize__ngram_range': (1/ 1)/ 'cls__estimator__n_estimators': 'warn'/ 'steps': [('features'/ FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ tok... tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False))/ ('cls'/ MultiOutputClassifier(estimator=RandomForestClassifier(bootstrap=True/ class_weight=None/ criterion='gini'/ max_depth=None/ max_features='auto'/ max_leaf_nodes=None/ min_impurity_decrease=0.0/ min_impurity_split=None/ min_samples_leaf=1/ min_samples_split=2/ min_weight_fraction_leaf=0.0/ n_estimators='warn'/ n_jobs=None/ oob_score=False/ random_state=None/ verbose=0/ warm_start=False)/ n_jobs=-1))]/ 'features__term_emb__vectorize': CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None)/ 'features__term_emb__vectorize__dtype': <class 'numpy.int64'>/ 'cls__estimator__oob_score': False/ 'features__glove__glove_emb__type': 'centroid'/ 'features__term_emb__vectorize__tokenizer': <function tokenize_ner at 0x000002C30018D730>/ 'features__term_emb__memory': None/ 'features__term_emb__vectorize__max_df': 0.5/ 'features__glove__glove_emb__tokenizer': <function tokenize_clean at 0x000002C35E90AE18>/ 'cls__estimator__min_impurity_decrease': 0.0/ 'cls__estimator__bootstrap': True/ 'memory': None/ 'features__verbose': False/ 'features__term_emb__tfidf__smooth_idf': True/ 'cls__estimator__warm_start': False/ 'features__glove__glove_emb__name': None/ 'features__term_emb__vectorize__min_df': 1/ 'cls__estimator__verbose': 0/ 'features__glove__verbose': False/ 'features__term_emb__steps': [('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ 'cls__estimator__criterion': 'gini'/ 'features__transformer_weights': None/ 'features__term_emb__vectorize__input': 'content'/ 'features__term_emb__tfidf__use_idf': False/ 'cls__n_jobs': -1/ 'features__glove__steps': [('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ 'features__term_emb__vectorize__token_pattern': '(?u)\\b\\w\\w+\\b'/ 'features__term_emb__verbose': False/ 'features__term_emb__tfidf__norm': 'l2'/ 'features__glove__glove_emb': GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid')/ 'features__glove__glove_emb__max_feat': 5/ 'features__term_emb': Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False)/ 'features__term_emb__vectorize__decode_error': 'strict'/ 'cls__estimator__max_features': 'auto'/ 'features__glove': Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False)/ 'features__glove__memory': None/ 'features__term_emb__tfidf': TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False)/ 'features__term_emb__vectorize__max_features': None/ 'verbose': False/ 'cls': MultiOutputClassifier(estimator=RandomForestClassifier(bootstrap=True/ class_weight=None/ criterion='gini'/ max_depth=None/ max_features='auto'/ max_leaf_nodes=None/ min_impurity_decrease=0.0/ min_impurity_split=None/ min_samples_leaf=1/ min_samples_split=2/ min_weight_fraction_leaf=0.0/ n_estimators='warn'/ n_jobs=None/ oob_score=False/ random_state=None/ verbose=0/ warm_start=False)/ n_jobs=-1)/ 'features__transformer_list': [('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ 'cls__estimator__min_samples_leaf': 1/ 'features__term_emb__vectorize__analyzer': 'word'/ 'cls__estimator__min_samples_split': 2/ 'features__term_emb__vectorize__vocabulary': None/ 'features__term_emb__vectorize__lowercase': True/ 'features__term_emb__vectorize__preprocessor': None/ 'features__n_jobs': None/ 'features__term_emb__vectorize__stop_words': None/ 'cls__estimator__max_leaf_nodes': None/ 'cls__estimator__class_weight': None/ 'features__term_emb__vectorize__binary': False/ 'features__glove__glove_emb__dim': None/ 'cls__estimator__min_impurity_split': None/ 'cls__estimator__random_state': None/ 'cls__estimator__n_jobs': None/ 'features__term_emb__vectorize__encoding': 'utf-8'/ 'features__term_emb__vectorize__strip_accents': None/ 'cls__estimator__max_depth': None/ 'cls__estimator': RandomForestClassifier(bootstrap=True/ class_weight=None/ criterion='gini'/ max_depth=None/ max_features='auto'/ max_leaf_nodes=None/ min_impurity_decrease=0.0/ min_impurity_split=None/ min_samples_leaf=1/ min_samples_split=2/ min_weight_fraction_leaf=0.0/ n_estimators='warn'/ n_jobs=None/ oob_score=False/ random_state=None/ verbose=0/ warm_start=False)/ 'features__term_emb__tfidf__sublinear_tf': False/ 'features': FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ tok... tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False)}
adaboost_forest_classifier,0.436911,0.754226,0.307529,Wed Sep 11 11:06:27 2019,{'cls__estimator__base_estimator__criterion': 'gini'/ 'features__term_emb__vectorize__ngram_range': (1/ 1)/ 'cls__estimator__base_estimator__oob_score': False/ 'cls__estimator__base_estimator__max_depth': None/ 'cls__estimator__n_estimators': 5/ 'steps': [('features'/ FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ tok... tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False))/ ('cls'/ MultiOutputClassifier(estimator=AdaBoostClassifier(algorithm='SAMME.R'/ base_estimator=RandomForestClassifier(bootstrap=True/ class_weight=None/ criterion='gini'/ max_depth=None/ max_features='auto'/ max_leaf_nodes=None/ min_impurity_decrease=0.0/ min_impurity_split=None/ min_samples_leaf=1/ min_samples_split=2/ min_weight_fraction_leaf=0.0/ n_estimators='warn'/ n_jobs=None/ oob_score=False/ random_state=None/ verbose=0/ warm_start=False)/ learning_rate=1.0/ n_estimators=5/ random_state=None)/ n_jobs=-1))]/ 'features__term_emb__vectorize': CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None)/ 'cls__estimator__base_estimator__verbose': 0/ 'features__term_emb__vectorize__dtype': <class 'numpy.int64'>/ 'cls__estimator__base_estimator__min_impurity_split': None/ 'features__glove__glove_emb__type': 'centroid'/ 'features__term_emb__vectorize__tokenizer': <function tokenize_ner at 0x000002C30018D730>/ 'features__term_emb__memory': None/ 'features__term_emb__vectorize__max_df': 0.5/ 'features__glove__glove_emb__tokenizer': <function tokenize_clean at 0x000002C35E90AE18>/ 'memory': None/ 'features__verbose': False/ 'features__term_emb__tfidf__smooth_idf': True/ 'features__glove__glove_emb__name': None/ 'features__term_emb__vectorize__min_df': 1/ 'cls__estimator__base_estimator__bootstrap': True/ 'features__glove__verbose': False/ 'features__term_emb__steps': [('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ 'features__transformer_weights': None/ 'cls__estimator__base_estimator__min_samples_split': 2/ 'features__term_emb__vectorize__input': 'content'/ 'features__term_emb__tfidf__use_idf': False/ 'cls__n_jobs': -1/ 'features__glove__steps': [('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ 'features__term_emb__vectorize__token_pattern': '(?u)\\b\\w\\w+\\b'/ 'features__term_emb__verbose': False/ 'features__term_emb__tfidf__norm': 'l2'/ 'features__glove__glove_emb': GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid')/ 'features__glove__glove_emb__max_feat': 5/ 'features__term_emb': Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False)/ 'features__term_emb__vectorize__decode_error': 'strict'/ 'cls__estimator__base_estimator__n_estimators': 'warn'/ 'features__glove': Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False)/ 'features__glove__memory': None/ 'cls__estimator__base_estimator__warm_start': False/ 'features__term_emb__tfidf': TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False)/ 'features__term_emb__vectorize__max_features': None/ 'verbose': False/ 'cls': MultiOutputClassifier(estimator=AdaBoostClassifier(algorithm='SAMME.R'/ base_estimator=RandomForestClassifier(bootstrap=True/ class_weight=None/ criterion='gini'/ max_depth=None/ max_features='auto'/ max_leaf_nodes=None/ min_impurity_decrease=0.0/ min_impurity_split=None/ min_samples_leaf=1/ min_samples_split=2/ min_weight_fraction_leaf=0.0/ n_estimators='warn'/ n_jobs=None/ oob_score=False/ random_state=None/ verbose=0/ warm_start=False)/ learning_rate=1.0/ n_estimators=5/ random_state=None)/ n_jobs=-1)/ 'features__transformer_list': [('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ 'features__term_emb__vectorize__analyzer': 'word'/ 'cls__estimator__base_estimator__min_impurity_decrease': 0.0/ 'cls__estimator__base_estimator__min_weight_fraction_leaf': 0.0/ 'features__term_emb__vectorize__vocabulary': None/ 'features__term_emb__vectorize__lowercase': True/ 'cls__estimator__base_estimator__random_state': None/ 'features__term_emb__vectorize__preprocessor': None/ 'features__n_jobs': None/ 'cls__estimator__base_estimator__min_samples_leaf': 1/ 'features__term_emb__vectorize__stop_words': None/ 'cls__estimator__base_estimator': RandomForestClassifier(bootstrap=True/ class_weight=None/ criterion='gini'/ max_depth=None/ max_features='auto'/ max_leaf_nodes=None/ min_impurity_decrease=0.0/ min_impurity_split=None/ min_samples_leaf=1/ min_samples_split=2/ min_weight_fraction_leaf=0.0/ n_estimators='warn'/ n_jobs=None/ oob_score=False/ random_state=None/ verbose=0/ warm_start=False)/ 'cls__estimator__base_estimator__class_weight': None/ 'cls__estimator__base_estimator__n_jobs': None/ 'features__term_emb__vectorize__binary': False/ 'features__glove__glove_emb__dim': None/ 'cls__estimator__algorithm': 'SAMME.R'/ 'cls__estimator__random_state': None/ 'cls__estimator__base_estimator__max_features': 'auto'/ 'features__term_emb__vectorize__encoding': 'utf-8'/ 'features__term_emb__vectorize__strip_accents': None/ 'cls__estimator': AdaBoostClassifier(algorithm='SAMME.R'/ base_estimator=RandomForestClassifier(bootstrap=True/ class_weight=None/ criterion='gini'/ max_depth=None/ max_features='auto'/ max_leaf_nodes=None/ min_impurity_decrease=0.0/ min_impurity_split=None/ min_samples_leaf=1/ min_samples_split=2/ min_weight_fraction_leaf=0.0/ n_estimators='warn'/ n_jobs=None/ oob_score=False/ random_state=None/ verbose=0/ warm_start=False)/ learning_rate=1.0/ n_estimators=5/ random_state=None)/ 'cls__estimator__learning_rate': 1.0/ 'features__term_emb__tfidf__sublinear_tf': False/ 'features': FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ tok... tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False)/ 'cls__estimator__base_estimator__max_leaf_nodes': None}
support_vector_small,0.371681,0.770000,0.244963,Wed Sep 11 11:11:01 2019,{'features__term_emb__vectorize__ngram_range': (1/ 1)/ 'cls__estimator__coef0': 0.0/ 'steps': [('features'/ FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ tok... tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False))/ ('cls'/ MultiOutputClassifier(estimator=SVC(C=1.0/ cache_size=200/ class_weight=None/ coef0=0.0/ decision_function_shape='ovr'/ degree=3/ gamma='auto_deprecated'/ kernel='rbf'/ max_iter=-1/ probability=False/ random_state=None/ shrinking=True/ tol=0.001/ verbose=False)/ n_jobs=-1))]/ 'features__term_emb__vectorize': CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None)/ 'cls__estimator__shrinking': True/ 'features__term_emb__vectorize__dtype': <class 'numpy.int64'>/ 'cls__estimator__cache_size': 200/ 'features__glove__glove_emb__type': 'centroid'/ 'features__term_emb__vectorize__tokenizer': <function tokenize_ner at 0x000002C30018D730>/ 'features__term_emb__memory': None/ 'features__term_emb__vectorize__max_df': 0.5/ 'cls__estimator__decision_function_shape': 'ovr'/ 'features__glove__glove_emb__tokenizer': <function tokenize_clean at 0x000002C35E90AE18>/ 'memory': None/ 'features__verbose': False/ 'features__term_emb__tfidf__smooth_idf': True/ 'features__glove__glove_emb__name': None/ 'features__term_emb__vectorize__min_df': 1/ 'cls__estimator__verbose': False/ 'features__glove__verbose': False/ 'features__term_emb__steps': [('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ 'features__transformer_weights': None/ 'cls__estimator__gamma': 'auto_deprecated'/ 'features__term_emb__vectorize__input': 'content'/ 'features__term_emb__tfidf__use_idf': False/ 'cls__n_jobs': -1/ 'features__glove__steps': [('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ 'features__term_emb__vectorize__token_pattern': '(?u)\\b\\w\\w+\\b'/ 'features__term_emb__verbose': False/ 'features__term_emb__tfidf__norm': 'l2'/ 'features__glove__glove_emb': GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid')/ 'features__glove__glove_emb__max_feat': 5/ 'features__term_emb': Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False)/ 'features__term_emb__vectorize__decode_error': 'strict'/ 'cls__estimator__probability': False/ 'features__glove': Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False)/ 'cls__estimator__degree': 3/ 'features__glove__memory': None/ 'cls__estimator__kernel': 'rbf'/ 'features__term_emb__tfidf': TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False)/ 'features__term_emb__vectorize__max_features': None/ 'verbose': False/ 'cls': MultiOutputClassifier(estimator=SVC(C=1.0/ cache_size=200/ class_weight=None/ coef0=0.0/ decision_function_shape='ovr'/ degree=3/ gamma='auto_deprecated'/ kernel='rbf'/ max_iter=-1/ probability=False/ random_state=None/ shrinking=True/ tol=0.001/ verbose=False)/ n_jobs=-1)/ 'features__transformer_list': [('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ 'features__term_emb__vectorize__analyzer': 'word'/ 'features__term_emb__vectorize__vocabulary': None/ 'features__term_emb__vectorize__lowercase': True/ 'features__term_emb__vectorize__preprocessor': None/ 'features__n_jobs': None/ 'features__term_emb__vectorize__stop_words': None/ 'cls__estimator__C': 1.0/ 'features__term_emb__vectorize__binary': False/ 'features__glove__glove_emb__dim': None/ 'cls__estimator__class_weight': None/ 'cls__estimator__max_iter': -1/ 'cls__estimator__random_state': None/ 'cls__estimator__tol': 0.001/ 'features__term_emb__vectorize__encoding': 'utf-8'/ 'features__term_emb__vectorize__strip_accents': None/ 'cls__estimator': SVC(C=1.0/ cache_size=200/ class_weight=None/ coef0=0.0/ decision_function_shape='ovr'/ degree=3/ gamma='auto_deprecated'/ kernel='rbf'/ max_iter=-1/ probability=False/ random_state=None/ shrinking=True/ tol=0.001/ verbose=False)/ 'features__term_emb__tfidf__sublinear_tf': False/ 'features': FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ tok... tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False)}
support_vector_small,0.371681,0.770000,0.244963,Wed Sep 11 11:16:02 2019,{'features__term_emb__vectorize__ngram_range': (1/ 1)/ 'cls__estimator__coef0': 0.0/ 'steps': [('features'/ FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ tok... tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False))/ ('cls'/ MultiOutputClassifier(estimator=SVC(C=0.5/ cache_size=200/ class_weight=None/ coef0=0.0/ decision_function_shape='ovr'/ degree=6/ gamma='auto_deprecated'/ kernel='rbf'/ max_iter=-1/ probability=False/ random_state=None/ shrinking=True/ tol=0.001/ verbose=False)/ n_jobs=-1))]/ 'features__term_emb__vectorize': CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None)/ 'cls__estimator__shrinking': True/ 'features__term_emb__vectorize__dtype': <class 'numpy.int64'>/ 'cls__estimator__cache_size': 200/ 'features__glove__glove_emb__type': 'centroid'/ 'features__term_emb__vectorize__tokenizer': <function tokenize_ner at 0x000002C30018D730>/ 'features__term_emb__memory': None/ 'features__term_emb__vectorize__max_df': 0.5/ 'cls__estimator__decision_function_shape': 'ovr'/ 'features__glove__glove_emb__tokenizer': <function tokenize_clean at 0x000002C35E90AE18>/ 'memory': None/ 'features__verbose': False/ 'features__term_emb__tfidf__smooth_idf': True/ 'features__glove__glove_emb__name': None/ 'features__term_emb__vectorize__min_df': 1/ 'cls__estimator__verbose': False/ 'features__glove__verbose': False/ 'features__term_emb__steps': [('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ 'features__transformer_weights': None/ 'cls__estimator__gamma': 'auto_deprecated'/ 'features__term_emb__vectorize__input': 'content'/ 'features__term_emb__tfidf__use_idf': False/ 'cls__n_jobs': -1/ 'features__glove__steps': [('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ 'features__term_emb__vectorize__token_pattern': '(?u)\\b\\w\\w+\\b'/ 'features__term_emb__verbose': False/ 'features__term_emb__tfidf__norm': 'l2'/ 'features__glove__glove_emb': GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid')/ 'features__glove__glove_emb__max_feat': 5/ 'features__term_emb': Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False)/ 'features__term_emb__vectorize__decode_error': 'strict'/ 'cls__estimator__probability': False/ 'features__glove': Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False)/ 'cls__estimator__degree': 6/ 'features__glove__memory': None/ 'cls__estimator__kernel': 'rbf'/ 'features__term_emb__tfidf': TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False)/ 'features__term_emb__vectorize__max_features': None/ 'verbose': False/ 'cls': MultiOutputClassifier(estimator=SVC(C=0.5/ cache_size=200/ class_weight=None/ coef0=0.0/ decision_function_shape='ovr'/ degree=6/ gamma='auto_deprecated'/ kernel='rbf'/ max_iter=-1/ probability=False/ random_state=None/ shrinking=True/ tol=0.001/ verbose=False)/ n_jobs=-1)/ 'features__transformer_list': [('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ 'features__term_emb__vectorize__analyzer': 'word'/ 'features__term_emb__vectorize__vocabulary': None/ 'features__term_emb__vectorize__lowercase': True/ 'features__term_emb__vectorize__preprocessor': None/ 'features__n_jobs': None/ 'features__term_emb__vectorize__stop_words': None/ 'cls__estimator__C': 0.5/ 'features__term_emb__vectorize__binary': False/ 'features__glove__glove_emb__dim': None/ 'cls__estimator__class_weight': None/ 'cls__estimator__max_iter': -1/ 'cls__estimator__random_state': None/ 'cls__estimator__tol': 0.001/ 'features__term_emb__vectorize__encoding': 'utf-8'/ 'features__term_emb__vectorize__strip_accents': None/ 'cls__estimator': SVC(C=0.5/ cache_size=200/ class_weight=None/ coef0=0.0/ decision_function_shape='ovr'/ degree=6/ gamma='auto_deprecated'/ kernel='rbf'/ max_iter=-1/ probability=False/ random_state=None/ shrinking=True/ tol=0.001/ verbose=False)/ 'features__term_emb__tfidf__sublinear_tf': False/ 'features': FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ tok... tokenizer=<function tokenize_ner at 0x000002C30018D730>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C35E90AE18>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False)}
classify_final,0.675088,0.805797,0.580866,Wed Sep 11 11:33:28 2019,{'cls__estimator__n_jobs': None/ 'features__term_emb__vectorize__ngram_range': (1/ 1)/ 'steps': [('features'/ FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ tok... tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False))/ ('cls'/ MultiOutputClassifier(estimator=LogisticRegression(C=2.0/ class_weight=None/ dual=False/ fit_intercept=True/ intercept_scaling=1/ l1_ratio=None/ max_iter=50/ multi_class='warn'/ n_jobs=None/ penalty='l2'/ random_state=None/ solver='warn'/ tol=0.0001/ verbose=0/ warm_start=False)/ n_jobs=-1))]/ 'features__term_emb__vectorize': CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ vocabulary=None)/ 'features__term_emb__vectorize__dtype': <class 'numpy.int64'>/ 'cls__estimator__C': 2.0/ 'features__glove__glove_emb__type': 'centroid'/ 'features__term_emb__vectorize__tokenizer': <function tokenize_clean at 0x000002C372AF2268>/ 'features__term_emb__memory': None/ 'features__term_emb__vectorize__max_df': 0.5/ 'features__glove__glove_emb__tokenizer': <function tokenize_clean at 0x000002C372AF2268>/ 'cls__estimator__warm_start': False/ 'memory': None/ 'features__verbose': False/ 'features__term_emb__tfidf__smooth_idf': True/ 'features__glove__glove_emb__name': None/ 'features__term_emb__vectorize__min_df': 1/ 'cls__estimator__verbose': 0/ 'cls__estimator__dual': False/ 'features__glove__verbose': False/ 'features__term_emb__steps': [('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ 'features__transformer_weights': None/ 'features__term_emb__vectorize__input': 'content'/ 'features__term_emb__tfidf__use_idf': False/ 'cls__n_jobs': -1/ 'features__glove__steps': [('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ type='centroid'))]/ 'features__term_emb__vectorize__token_pattern': '(?u)\\b\\w\\w+\\b'/ 'features__term_emb__verbose': False/ 'features__term_emb__tfidf__norm': 'l2'/ 'features__glove__glove_emb': GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ type='centroid')/ 'features__glove__glove_emb__max_feat': 5/ 'features__term_emb': Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False)/ 'features__term_emb__vectorize__decode_error': 'strict'/ 'cls__estimator__l1_ratio': None/ 'features__glove': Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ type='centroid'))]/ verbose=False)/ 'features__glove__memory': None/ 'features__term_emb__tfidf': TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False)/ 'features__term_emb__vectorize__max_features': None/ 'verbose': False/ 'cls': MultiOutputClassifier(estimator=LogisticRegression(C=2.0/ class_weight=None/ dual=False/ fit_intercept=True/ intercept_scaling=1/ l1_ratio=None/ max_iter=50/ multi_class='warn'/ n_jobs=None/ penalty='l2'/ random_state=None/ solver='warn'/ tol=0.0001/ verbose=0/ warm_start=False)/ n_jobs=-1)/ 'features__transformer_list': [('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ token_pattern='(?u)\\b\\w\\w+\\b'/ tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ type='centroid'))]/ verbose=False))]/ 'cls__estimator__solver': 'warn'/ 'features__term_emb__vectorize__analyzer': 'word'/ 'features__term_emb__vectorize__vocabulary': None/ 'features__term_emb__vectorize__lowercase': True/ 'cls__estimator__multi_class': 'warn'/ 'features__term_emb__vectorize__preprocessor': None/ 'features__n_jobs': None/ 'features__term_emb__vectorize__stop_words': None/ 'cls__estimator__class_weight': None/ 'cls__estimator__fit_intercept': True/ 'features__term_emb__vectorize__binary': False/ 'features__glove__glove_emb__dim': None/ 'cls__estimator__penalty': 'l2'/ 'cls__estimator__max_iter': 50/ 'cls__estimator__random_state': None/ 'cls__estimator__tol': 0.0001/ 'features__term_emb__vectorize__encoding': 'utf-8'/ 'features__term_emb__vectorize__strip_accents': None/ 'cls__estimator': LogisticRegression(C=2.0/ class_weight=None/ dual=False/ fit_intercept=True/ intercept_scaling=1/ l1_ratio=None/ max_iter=50/ multi_class='warn'/ n_jobs=None/ penalty='l2'/ random_state=None/ solver='warn'/ tol=0.0001/ verbose=0/ warm_start=False)/ 'features__term_emb__tfidf__sublinear_tf': False/ 'features': FeatureUnion(n_jobs=None/ transformer_list=[('term_emb'/ Pipeline(memory=None/ steps=[('vectorize'/ CountVectorizer(analyzer='word'/ binary=False/ decode_error='strict'/ dtype=<class 'numpy.int64'>/ encoding='utf-8'/ input='content'/ lowercase=True/ max_df=0.5/ max_features=None/ min_df=1/ ngram_range=(1/ 1)/ preprocessor=None/ stop_words=None/ strip_accents=None/ tok... tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ vocabulary=None))/ ('tfidf'/ TfidfTransformer(norm='l2'/ smooth_idf=True/ sublinear_tf=False/ use_idf=False))]/ verbose=False))/ ('glove'/ Pipeline(memory=None/ steps=[('glove_emb'/ GloVeTransformer(dim=None/ max_feat=5/ name=None/ tokenizer=<function tokenize_clean at 0x000002C372AF2268>/ type='centroid'))]/ verbose=False))]/ transformer_weights=None/ verbose=False)/ 'cls__estimator__intercept_scaling': 1}
